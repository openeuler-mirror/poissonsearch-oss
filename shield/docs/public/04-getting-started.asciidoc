[[getting-started]]
== Getting Started (Long Version)

Security is installed as an Elasticsearch plugin. The plugin must be installed on every node in the cluster, and every
node must be restarted after installation. Plan for a complete cluster restart before beginning the installation
process.

IMPORTANT:  Shield 2.0.x is compatible with Elasticsearch 1.5.0 and above.

[float]
=== Configuring your environment

If you install Elasticsearch as a package or you specify a custom configuration directory, the command line
tools require you to specify the configuration directory. On Linux systems, add the following line to your
`.profile` file:

[source,shell]
----------------------------------------------------------
export ES_JAVA_OPTS="-Des.path.conf=/etc/elasticsearch"
----------------------------------------------------------

NOTE: When using `sudo` to run commands as a different user, the `ES_JAVA_OPTS` setting from your profile will not be
available in the other user's environment. You can manually pass the environment variables to the command or you can
make the environment variable available by adding the following line to the `/etc/sudoers` file:

[source,shell]
----------------------------------------------------------
Defaults    env_keep += "ES_JAVA_OPTS"
----------------------------------------------------------

On Windows systems, the `setx` command can be used to specify a custom configuration directory:

[source,shell]
----------------------------------------------------------
setx ES_JAVA_OPTS "-Des.path.conf=C:\config"
----------------------------------------------------------

[float]
=== Shield And Licensing

Shield requires a license to operate and the licensing is managed by a separate plugin. For this reason,
the License plugin must be installed (without the license plugin Shield will prevent the node from starting up).

For instructions on how to install the License plugin, please refer to <<license-management, License Management>>.

Once you have the licensing plugin installed, you may begin working with Shield immediately. When elasticsearch starts for the
first time with Shield and the licensing plugin installed, a 30-day trial license for Shield will automatically be generated.
If you have a license for Shield that you would like to install, please refer to <<installing-license, installing a license>>.

IMPORTANT:  With a valid license, Shield will be fully operational. Upon license expiry, Shield will operate in a
            degraded mode, where cluster health, cluster stats, and index stats APIs will be blocked. All other operations will
            continue operating normally. Additional information can be found at the <<license-expiration, Shield license expiration>>
            section.

[float]
=== Installing the Shield plugin

Follow these steps on every node in the cluster:

. From the Elasticsearch home directory, run:
+
[source,sh]
------------------------------------------
bin/plugin -i elasticsearch/shield/latest
------------------------------------------

. Restart your Elasticsearch node.
+
Before restarting your cluster, consider temporarily {ref}/modules-cluster.html[disabling shard allocation].

If your server doesn't have direct Internet access, see <<manual_download,manual download>> for an alternative way to
get the Security binaries.

[[manual_download]]

[float]
==== Manual Download

Elasticsearch’s `bin/plugin` script requires direct Internet access for downloading and installing the security plugin.
If your server doesn’t have Internet access, you can download the required binaries from the following link:

[source,sh]
----------------------------------------------------
https://download.elastic.co/elasticsearch/shield/shield-2.0.0.zip
----------------------------------------------------

Transfer the compressed file to your server, then install the plugin with the `bin/plugin` script:

[source,shell]
----------------------------------------------------
bin/plugin -i shield -u file://PATH_TO_ZIP_FILE <1>
----------------------------------------------------
<1> Absolute path to Shield plugin zip distribution file (e.g. `file:///path/to/file/shield-2.0.0.zip`,
    note the three slashes at the beginning)

[[install-layout]]

[float]
=== Shield Installation Layout

Shield comes with its own set of configuration files and executable tools. These include:

[horizontal]
[[shield-bin]] *Executables*::

Shield's bin directory is located at `$ES_HOME/bin/shield`. Consider adding this directory to
your `PATH` environment variable.

[[shield-config]] *Configuration*::

Shield's config directory is located at `<elasticsearch_config>/shield` (where
`<elasticsearch_config>` refers to the standard config directory of
Elasticsearch - typically at `$ES_HOME/config`).

Unless otherwise stated, Shield's settings are placed in the main
`elasticsearch.yml` configuration file.

[[message-authentication]]

[float]
=== Message Authentication

Message authentication verifies that a message has not been tampered with or corrupted in transit. To enable message
authentication, run the `syskeygen` tool without any options:

[source, shell]
----------------
bin/shield/syskeygen
----------------

This creates the system key file in Shield's <<shield-config,config>> directory, e.g. `config/shield/system_key`. You 
can customize this file's location by changing the value of the `shield.system_key.file` setting in the 
`elasticsearch.yml` file.

IMPORTANT: Because the system key is a symmetric key, the same key must be on every node in the cluster. Copy the key to
           every node in the cluster after generating it.

[float]
=== Enabling Role-based Access Control

Now that we have Shield installed, we'll move to configuring the users (and their roles) with which we'll be able to execute
various of APIs on Elasticsearch.

[float]
==== Defining Roles

A _role_ encompasses a set of permissions over the cluster and/or the indices in it. Roles are defined in the
`$ES_HOME/config/shield/roles.yml` file.

.Example role definition
[source,yaml]
--------------------------------------------------
# All cluster rights
# All operations on all indices
admin: <1>
  cluster: all
  indices:
    '*': all

# monitoring cluster privileges
# All operations on all indices
power_user: <2>
  cluster: monitor
  indices:
    '*': all

# Read-only operations on indices
user: <3>
  indices:
    '*': read
--------------------------------------------------
<1> The `admin` role enables full access to the cluster and all its indices.
<2> The `power_user` role enables monitoring only access on the cluster and full access on all its indices.
<3> The `user` role has no cluster wide permissions and only has data read access on all its indices.

For this quick getting started guide, we won't need to change anything in the `roles.yml` file that comes out-of-the-box
with Shield, as it already defines the roles listed in the snippet above. To learn more on roles and how one can configure
them, please see <<roles, Roles>>.

[float]
==== Defining Users

Shield supports different authentication realms that authenticate users from different sources. In this example, we'll 
use the internal <<esusers,`esusers`>> realm that comes with Shield. The `esusers` realm supports user management using 
the `esusers` command line tool from Shield's `bin` directory.

NOTE: The `esusers` realm is enabled by default when no realms are explicitly configured in `elasticsearch.yml`. For more
      information on realms configuration please see <<realms, Realms>>.

[source,shell]
--------------------------------------------------
bin/shield/esusers useradd rdeniro -p taxidriver -r admin
--------------------------------------------------

[source,shell]
--------------------------------------------------
bin/shield/esusers useradd alpacino -p godfather -r user
--------------------------------------------------

The example above adds two users:

* The `rdeniro` user with password `taxidriver`, with the `admin` role in the cluster
* The `alpacino` user with password `godfather`, with the `user` role in the cluster

NOTE: To ensure that Elasticsearch can read the user and role information at startup, run `esusers useradd` as the
      same user you use to run Elasticsearch. Running the command as root or some other user will update the permissions 
      for the `users` and `users_roles` files and prevent Elasticsearch from accessing them.

Now that we've defined the roles and the users of the cluster, you can start the Elasticsearch node and we'll verify that
Shield plugin has been loaded.

[float]
==== Verifying Shield Installation
Once your Elasticsearch node is running, you can issue a `curl` command to verify that Shield has been loaded and is the
expected version.

[source,shell]
-------------------------------------------------------------------------------
curl --user rdeniro:taxidriver 'localhost:9200/_shield'
-------------------------------------------------------------------------------

[source,json]
-------------------------------------------------------------------------------
{
  "status" : "enabled",
  "name" : "Mimic",
  "cluster_name" : "elasticsearch",
  "version" : {
    "number" : "2.0.0",
    "build_hash" : "",
    "build_timestamp" : "NA",
    "build_snapshot" : true
  },
  "tagline" : "You know, for security"
}
-------------------------------------------------------------------------------

You can also check the startup logs to verify that the Shield plugin has loaded and the network transports are using Shield.
A successful installation will show lines similar to the following:

[source,shell]
----------------
[2014-10-09 13:47:38,841][INFO ][transport ] [Ezekiel Stane] Using [org.elasticsearch.shield.transport.ShieldServerTransportService] as transport service, overridden by [shield]
[2014-10-09 13:47:38,841][INFO ][transport ] [Ezekiel Stane] Using [org.elasticsearch.shield.transport.netty.ShieldNettyTransport] as transport, overridden by [shield]
[2014-10-09 13:47:38,842][INFO ][http      ] [Ezekiel Stane] Using [org.elasticsearch.shield.transport.netty.ShieldNettyHttpServerTransport] as http transport, overridden by [shield]
----------------

In the next section, we'll use a simple HTTP client to interact with Elasticsearch protected by Shield.

[[clientauth]]

[float]
=== Configuring HTTP REST Clients

Elasticsearch works with standard HTTP http://en.wikipedia.org/wiki/Basic_access_authentication[basic authentication]
headers to identify the requester. Since Elasticsearch is stateless, this header must be sent with every request:

[source,shell]
--------------------------------------------------
Authorization: Basic <TOKEN> <1>
--------------------------------------------------
<1> The `<TOKEN>` is computed as `base64(USERNAME:PASSWORD)`

[float]
==== Client examples

Using `curl` without basic authentication to create an index has the following result:

[source,shell]
-------------------------------------------------------------------------------
curl -XPUT 'localhost:9200/idx'
-------------------------------------------------------------------------------

[source,json]
-------------------------------------------------------------------------------
{
  "error":  "AuthenticationException[Missing authentication token]",
  "status": 401
}
-------------------------------------------------------------------------------

Since no user is associated with the request above, the request returns an authentication error. Next, use `curl` 
with basic auth to create an index as the `rdeniro` user:

[source,shell]
---------------------------------------------------------
curl --user rdeniro:taxidriver -XPUT 'localhost:9200/idx'
---------------------------------------------------------

[source,json]
---------------------------------------------------------
{
  "acknowledged": true
}
---------------------------------------------------------

Since the request is executed on behalf of administrative user `rdeniro`, the create index request authenticates and
authorizes successfully, resulting in normal execution of the request. Creating another index as the `alpacino` user 
results in the following error:

[source,shell]
------------------------------------------------------------------------------------------------------------------
curl --user alpacino:godfather -XPUT 'localhost:9200/idx2'
------------------------------------------------------------------------------------------------------------------

[source,json]
------------------------------------------------------------------------------------------------------------------
{
  "error":  "AuthorizationException[Action [indices:admin/create] is unauthorized for user [alpacino]]",
  "status": 403
}
------------------------------------------------------------------------------------------------------------------

As user `alpacino` does not have any index administration rights, the request is rejected with an authorization error.

[float]
=== Next Steps

Now you have a working cluster with authentication and access control enabled.
In the <<authorization, _Authorization_>> section, we explain how to manage users and their roles. The 
<<authentication, _Authentication_>> section explains how to use Shield's authentication realms and LDAP integration. The 
<<securing-nodes, _Securing Nodes_>> section discusses enabling SSL/TLS encryption for nodes and clients.
