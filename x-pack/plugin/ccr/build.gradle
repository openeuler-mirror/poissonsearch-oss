import com.carrotsearch.gradle.junit4.RandomizedTestingTask
import org.elasticsearch.gradle.BuildPlugin

evaluationDependsOn(xpackModule('core'))

apply plugin: 'elasticsearch.esplugin'
esplugin {
    name 'x-pack-ccr'
    description 'Elasticsearch Expanded Pack Plugin - CCR'
    classname 'org.elasticsearch.xpack.ccr.Ccr'
    hasNativeController false
    requiresKeystore true
    extendedPlugins = ['x-pack-core']
}
archivesBaseName = 'x-pack-ccr'

compileJava.options.compilerArgs << "-Xlint:-try"
compileTestJava.options.compilerArgs << "-Xlint:-try"

// Instead we create a separate task to run the
// tests based on ESIntegTestCase
task internalClusterTest(type: RandomizedTestingTask,
        group: JavaBasePlugin.VERIFICATION_GROUP,
        description: 'Java fantasy integration tests',
        dependsOn: test.dependsOn) {
    configure(BuildPlugin.commonTestConfig(project))
    classpath = project.test.classpath
    testClassesDirs = project.test.testClassesDirs
    include '**/*IT.class'
    exclude '**/CcrRestIT.class'
    systemProperty 'es.set.netty.runtime.available.processors', 'false'
}

integTestCluster {
    distribution 'zip'
    setting 'xpack.ml.enabled', 'false'
    setting 'xpack.monitoring.enabled', 'false'
    setting 'xpack.security.enabled', 'true'
    setting 'xpack.license.self_generated.type', 'trial'
    // TODO: reduce the need for superuser here
    setupCommand 'setup-ccr-user',
            'bin/elasticsearch-users', 'useradd', 'ccr-user', '-p', 'ccr-user-password', '-r', 'superuser'
    waitCondition = { node, ant ->
        File tmpFile = new File(node.cwd, 'wait.success')
        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",
                dest: tmpFile.toString(),
                username: 'ccr-user',
                password: 'ccr-user-password',
                ignoreerrors: true,
                retries: 10)
        return tmpFile.exists()
    }
}

check.dependsOn internalClusterTest
internalClusterTest.mustRunAfter test

// add all sub-projects of the qa sub-project
gradle.projectsEvaluated {
    project.subprojects
            .find { it.path == project.path + ":qa" }
            .subprojects
            .findAll { it.path.startsWith(project.path + ":qa") }
            .each { check.dependsOn it.check }
}

dependencies {
    compileOnly "org.elasticsearch:elasticsearch:${version}"

    compileOnly project(path: xpackModule('core'), configuration: 'default')
    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts')
    testCompile project(path: xpackModule('monitoring'), configuration: 'testArtifacts')
}

dependencyLicenses {
    ignoreSha 'x-pack-core'
}

run {
    plugin xpackModule('core')
}
