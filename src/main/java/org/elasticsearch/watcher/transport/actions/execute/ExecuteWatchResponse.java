/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
package org.elasticsearch.watcher.transport.actions.execute;

import org.elasticsearch.action.ActionResponse;
import org.elasticsearch.common.Nullable;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.watcher.support.xcontent.XContentSource;

import java.io.IOException;

/**
 * This class contains the WatchHistory generated by running the watch
 */
public class ExecuteWatchResponse extends ActionResponse {

    private XContentSource source;

    public ExecuteWatchResponse() {
    }

    public ExecuteWatchResponse(@Nullable BytesReference source) {
        this.source = source != null ? new XContentSource(source) : null;
    }

    /**
     * @return The watch record source
     */
    public XContentSource getSource() {
        return source;
    }

    @Override
    public void readFrom(StreamInput in) throws IOException {
        super.readFrom(in);
        source = in.readBoolean() ? XContentSource.readFrom(in) : null;
    }

    @Override
    public void writeTo(StreamOutput out) throws IOException {
        super.writeTo(out);
        out.writeBoolean(source != null);
        if (source != null) {
            XContentSource.writeTo(source, out);
        }
    }
}
