apply plugin: 'elasticsearch.standalone-rest-test'
apply plugin: 'elasticsearch.rest-test'

dependencies {
  testCompile project(path: ':x-pack-elasticsearch:plugin:core', configuration: 'testArtifacts')
  testCompile project(path: ':x-pack-elasticsearch:plugin', configuration: 'testArtifacts')
}

String outputDir = "generated-resources/${project.name}"
task copyXPackPluginProps(type: Copy) { // wth is this?
  from project(':x-pack-elasticsearch:plugin:core').file('src/main/plugin-metadata')
  from project(':x-pack-elasticsearch:plugin:core').tasks.pluginProperties
  from project(':x-pack-elasticsearch:plugin:security').file('src/main/plugin-metadata')
  from project(':x-pack-elasticsearch:plugin:security').tasks.pluginProperties
  into outputDir
}
project.sourceSets.test.output.dir(outputDir, builtBy: copyXPackPluginProps)

integTestCluster {
  distribution 'zip'
  plugin ':x-pack-elasticsearch:plugin'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.security.audit.enabled', 'true'
  setting 'xpack.security.audit.outputs', 'index'
  setting 'logger.level', 'DEBUG'
  setupCommand 'setupDummyUser',
               'bin/x-pack/users', 'useradd', 'test_user', '-p', 'x-pack-test-password', '-r', 'superuser'
  waitCondition = { node, ant ->
    File tmpFile = new File(node.cwd, 'wait.success')
    ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",
            dest: tmpFile.toString(),
            username: 'test_user',
            password: 'x-pack-test-password',
            ignoreerrors: true,
            retries: 10)
    return tmpFile.exists()
  }
}
