/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
package org.elasticsearch.xpack.qa.sql.security;

import org.apache.http.Header;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.message.BasicHeader;
import org.elasticsearch.SpecialPermission;
import org.elasticsearch.client.Response;
import org.elasticsearch.client.ResponseException;
import org.elasticsearch.common.CheckedFunction;
import org.elasticsearch.common.Nullable;
import org.elasticsearch.common.Strings;
import org.elasticsearch.common.io.PathUtils;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentHelper;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.test.NotEqualMessageBuilder;
import org.elasticsearch.test.rest.ESRestTestCase;
import org.hamcrest.Matcher;
import org.junit.AfterClass;
import org.junit.Before;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import static java.util.Collections.emptyList;
import static java.util.Collections.emptyMap;
import static java.util.Collections.singletonList;
import static java.util.Collections.singletonMap;
import static org.elasticsearch.xpack.qa.sql.rest.RestSqlTestCase.columnInfo;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.hasItems;

public class RestSqlSecurityIT extends ESRestTestCase {
    private static final String SQL_ACTION_NAME = "indices:data/read/sql";
    private static final String SQL_INDICES_ACTION_NAME = "indices:data/read/sql/tables";
    /**
     * Location of the audit log file. We could technically figure this out by reading the admin
     * APIs but it isn't worth doing because we also have to give ourselves permission to read
     * the file and that must be done by setting a system property and reading it in
     * {@code plugin-security.policy}. So we may as well have gradle set the property.
     */
    private static final Path AUDIT_LOG_FILE;
    static {
        String auditLogFileString = System.getProperty("tests.audit.logfile");
        if (null == auditLogFileString) {
            throw new IllegalStateException("tests.audit.logfile must be set to run this test. It is automatically "
                    + "set by gradle. If you must set it yourself then it should be the absolute path to the audit "
                    + "log file generated by running x-pack with audit logging enabled.");
        }
        AUDIT_LOG_FILE = PathUtils.get(auditLogFileString);
    }

    private static boolean oneTimeSetup = false;
    private static boolean auditFailure = false;

    /**
     * How much of the audit log was written before the test started.
     */
    private long auditLogWrittenBeforeTestStart;

    /**
     * All tests run as a an administrative user but use
     * <code>es-security-runas-user</code> to become a less privileged user when needed.
     */
    @Override
    protected Settings restClientSettings() {
        return RestSqlIT.securitySettings();
    }

    @Override
    protected boolean preserveIndicesUponCompletion() {
        /* We can't wipe the cluster between tests because that nukes the audit
         * trail index which makes the auditing flaky. Instead we wipe all
         * indices after the entire class is finished. */
        return true;
    }

    @Before
    public void oneTimeSetup() throws Exception {
        if (oneTimeSetup) {
            /* Since we don't wipe the cluster between tests we only need to
             * write the test data once. */
            return;
        }
        StringBuilder bulk = new StringBuilder();
        bulk.append("{\"index\":{\"_index\": \"test\", \"_type\": \"doc\", \"_id\":\"1\"}\n");
        bulk.append("{\"a\": 1, \"b\": 2, \"c\": 3}\n");
        bulk.append("{\"index\":{\"_index\": \"test\", \"_type\": \"doc\", \"_id\":\"2\"}\n");
        bulk.append("{\"a\": 4, \"b\": 5, \"c\": 6}\n");
        bulk.append("{\"index\":{\"_index\": \"bort\", \"_type\": \"doc\", \"_id\":\"1\"}\n");
        bulk.append("{\"a\": \"test\"}\n");
        client().performRequest("PUT", "/_bulk", singletonMap("refresh", "true"),
                new StringEntity(bulk.toString(), ContentType.APPLICATION_JSON));
        oneTimeSetup = true;
    }

    @Before
    public void setInitialAuditLogOffset() throws IOException {
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new SpecialPermission());
        }
        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
            if (false == Files.exists(AUDIT_LOG_FILE)) {
                auditLogWrittenBeforeTestStart = 0;
                return null;
            }
            if (false == Files.isRegularFile(AUDIT_LOG_FILE)) {
                throw new IllegalStateException("expected tests.audit.logfile [" + AUDIT_LOG_FILE + "]to be a plain file but wasn't");
            }
            try {
                auditLogWrittenBeforeTestStart = Files.size(AUDIT_LOG_FILE);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return null;
        });
    }

    @AfterClass
    public static void wipeIndicesAfterTests() throws IOException {
        try {
            adminClient().performRequest("DELETE", "*");
        } catch (ResponseException e) {
            // 404 here just means we had no indexes
            if (e.getResponse().getStatusLine().getStatusCode() != 404) {
                throw e;
            }
        }
    }

    // NOCOMMIT we're going to need to test jdbc and cli with these too!
    // NOCOMMIT we'll have to test scrolling as well
    // NOCOMMIT assert that we don't have more audit logs then what we expect.

    public void testQueryWorksAsAdmin() throws Exception {
        Map<String, Object> expected = new HashMap<>();
        expected.put("columns", Arrays.asList(
                columnInfo("a", "long"),
                columnInfo("b", "long"),
                columnInfo("c", "long")));
        expected.put("rows", Arrays.asList(
                Arrays.asList(1, 2, 3),
                Arrays.asList(4, 5, 6)));
        expected.put("size", 2);
        assertResponse(expected, runSql("SELECT * FROM test ORDER BY a", null));
        assertAuditForSqlGetTableSyncGranted("test_admin", "test");
    }

    public void testQueryWithFullAccess() throws Exception {
        createUser("full_access", "read_all");

        assertResponse(runSql("SELECT * FROM test ORDER BY a", null), runSql("SELECT * FROM test ORDER BY a", "full_access"));
        assertAuditForSqlGetTableSyncGranted("test_admin", "test");
        assertAuditForSqlGetTableSyncGranted("full_access", "test");
    }

    public void testQueryNoAccess() throws Exception {
        createUser("no_access", "read_nothing");

        ResponseException e = expectThrows(ResponseException.class, () -> runSql("SELECT * FROM test", "no_access"));
        assertThat(e.getMessage(), containsString("403 Forbidden"));
        assertAuditEvents(audit(false, SQL_ACTION_NAME, "no_access", empty()));
    }

    public void testQueryWrongAccess() throws Exception {
        createUser("wrong_access", "read_something_else");

        ResponseException e = expectThrows(ResponseException.class, () -> runSql("SELECT * FROM test", "wrong_access"));
        assertThat(e.getMessage(), containsString("403 Forbidden"));
        assertAuditEvents(
                /* This user has permission to run sql queries so they are
                 * given preliminary authorization. */
                audit(true, SQL_ACTION_NAME, "wrong_access", empty()),
                /* But as soon as they attempt to resolve an index that
                 * they don't have access to they get denied. */
                audit(false, SQL_ACTION_NAME, "wrong_access", hasItems("test")));
    }

    public void testQuerySingleFieldGranted() throws Exception {
        createUser("only_a", "read_test_a");

        assertResponse(runSql("SELECT a FROM test", null), runSql("SELECT * FROM test", "only_a"));
        assertAuditForSqlGetTableSyncGranted("test_admin", "test");
        assertAuditForSqlGetTableSyncGranted("only_a", "test");
        // clearAuditEvents();  NOCOMMIT
        expectBadRequest(() -> runSql("SELECT c FROM test", "only_a"), containsString("line 1:8: Unknown column [c]"));
        /* The user has permission to query the index but one of the
         * columns that they explicitly mention is hidden from them
         * by field level access control. This *looks* like a successful
         * query from the audit side because all the permissions checked
         * out but it failed in SQL because it couldn't compile the
         * query without the metadata for the missing field. */
        assertAuditForSqlGetTableSyncGranted("only_a", "test");
    }

    public void testQuerySingleFieldExcepted() throws Exception {
        createUser("not_c", "read_test_a_and_b");

        assertResponse(runSql("SELECT a, b FROM test", null), runSql("SELECT * FROM test", "not_c"));
        assertAuditForSqlGetTableSyncGranted("test_admin", "test");
        assertAuditForSqlGetTableSyncGranted("not_c", "test");
        // clearAuditEvents();  NOCOMMIT
        expectBadRequest(() -> runSql("SELECT c FROM test", "not_c"), containsString("line 1:8: Unknown column [c]"));
        /* The user has permission to query the index but one of the
         * columns that they explicitly mention is hidden from them
         * by field level access control. This *looks* like a successful
         * query from the audit side because all the permissions checked
         * out but it failed in SQL because it couldn't compile the
         * query without the metadata for the missing field. */
        assertAuditForSqlGetTableSyncGranted("not_c", "test");
    }

    public void testQueryDocumentExclued() throws Exception {
        createUser("no_3s", "read_test_without_c_3");

        assertResponse(runSql("SELECT * FROM test WHERE c != 3", null), runSql("SELECT * FROM test", "no_3s"));
        assertAuditForSqlGetTableSyncGranted("test_admin", "test");
        assertAuditForSqlGetTableSyncGranted("no_3s", "test");
    }

    public void testShowTablesWorksAsAdmin() throws Exception {
        Map<String, Object> expected = new HashMap<>();
        expected.put("columns", singletonList(columnInfo("table", "keyword")));
        expected.put("rows", Arrays.asList(
                singletonList("bort"),
                singletonList("test")));
        expected.put("size", 2);
        assertResponse(expected, runSql("SHOW TABLES", null));
        assertAuditEvents(
                audit(true, SQL_ACTION_NAME, "test_admin", empty()),
                audit(true, SQL_INDICES_ACTION_NAME, "test_admin", hasItems("test", "bort")));
    }

    public void testShowTablesWorksAsFullAccess() throws Exception {
        createUser("full_access", "read_all");

        assertResponse(runSql("SHOW TABLES", null), runSql("SHOW TABLES", "full_access"));
        assertAuditEvents(
                audit(true, SQL_ACTION_NAME, "test_admin", empty()),
                audit(true, SQL_INDICES_ACTION_NAME, "test_admin", hasItems("test", "bort")),
                audit(true, SQL_ACTION_NAME, "full_access", empty()),
                audit(true, SQL_INDICES_ACTION_NAME, "full_access", hasItems("test", "bort")));
    }

    public void testShowTablesWithNoAccess() throws Exception {
        createUser("no_access", "read_nothing");

        ResponseException e = expectThrows(ResponseException.class, () -> runSql("SHOW TABLES", "no_access"));
        assertThat(e.getMessage(), containsString("403 Forbidden"));
        assertAuditEvents(audit(false, SQL_ACTION_NAME, "no_access", empty()));
    }

    public void testShowTablesWithLimitedAccess() throws Exception {
        createUser("read_bort", "read_bort");

        assertResponse(runSql("SHOW TABLES LIKE 'bort'", null), runSql("SHOW TABLES", "read_bort"));
        assertAuditEvents(
                audit(true, SQL_ACTION_NAME, "test_admin", empty()),
                audit(true, SQL_INDICES_ACTION_NAME, "test_admin", contains("bort")),
                audit(true, SQL_ACTION_NAME, "read_bort", empty()),
                audit(true, SQL_INDICES_ACTION_NAME, "read_bort", contains("bort")));
    }

    public void testShowTablesWithLimitedAccessAndPattern() throws Exception {
        createUser("read_bort", "read_bort");

        Map<String, Object> expected = new HashMap<>();
        expected.put("columns", singletonList(columnInfo("table", "keyword")));
        expected.put("rows", emptyList());
        expected.put("size", 0);

        assertResponse(expected, runSql("SHOW TABLES LIKE 'test'", "read_bort"));
        assertAuditEvents(
                audit(true, SQL_ACTION_NAME, "read_bort", empty()),
                audit(true, SQL_INDICES_ACTION_NAME, "read_bort", contains("*", "-*")));
    }

    public void testDescribeWorksAsAdmin() throws Exception {
        Map<String, Object> expected = new HashMap<>();
        expected.put("columns", Arrays.asList(
                columnInfo("column", "keyword"),
                columnInfo("type", "keyword")));
        expected.put("rows", Arrays.asList(
                Arrays.asList("a", "BIGINT"),
                Arrays.asList("b", "BIGINT"),
                Arrays.asList("c", "BIGINT")));
        expected.put("size", 3);
        assertResponse(expected, runSql("DESCRIBE test", null));
        assertAuditForSqlGetTableSyncGranted("test_admin", "test");
    }

    public void testDescribeWorksAsFullAccess() throws Exception {
        createUser("full_access", "read_all");

        assertResponse(runSql("DESCRIBE test", null), runSql("DESCRIBE test", "full_access"));
        assertAuditForSqlGetTableSyncGranted("test_admin", "test");
        assertAuditForSqlGetTableSyncGranted("full_access", "test");
    }

    public void testDescribeWithNoAccess() throws Exception {
        createUser("no_access", "read_nothing");

        ResponseException e = expectThrows(ResponseException.class, () -> runSql("DESCRIBE test", "no_access"));
        assertThat(e.getMessage(), containsString("403 Forbidden"));
        assertAuditEvents(audit(false, SQL_ACTION_NAME, "no_access", empty()));
    }

    public void testDescribeWithWrongAccess() throws Exception {
        createUser("wrong_access", "read_something_else");

        ResponseException e = expectThrows(ResponseException.class, () -> runSql("DESCRIBE test", "wrong_access"));
        assertThat(e.getMessage(), containsString("403 Forbidden"));
        assertAuditEvents(
                /* This user has permission to run sql queries so they are
                 * given preliminary authorization. */
                audit(true, SQL_ACTION_NAME, "wrong_access", empty()),
                /* But as soon as they attempt to resolve an index that
                 * they don't have access to they get denied. */
                audit(false, SQL_INDICES_ACTION_NAME, "wrong_access", hasItems("test")));
    }

    public void testDescribeSingleFieldGranted() throws Exception {
        createUser("only_a", "read_test_a");

        Map<String, Object> expected = new HashMap<>();
        expected.put("columns", Arrays.asList(
                columnInfo("column", "keyword"),
                columnInfo("type", "keyword")));
        expected.put("rows", singletonList(Arrays.asList("a", "BIGINT")));
        expected.put("size", 1);

        assertResponse(expected, runSql("DESCRIBE test", "only_a"));
        assertAuditForSqlGetTableSyncGranted("only_a", "test");
    }

    public void testDescribeSingleFieldExcepted() throws Exception {
        createUser("not_c", "read_test_a_and_b");

        Map<String, Object> expected = new HashMap<>();
        expected.put("columns", Arrays.asList(
                columnInfo("column", "keyword"),
                columnInfo("type", "keyword")));
        expected.put("rows", Arrays.asList(
                Arrays.asList("a", "BIGINT"),
                Arrays.asList("b", "BIGINT")));
        expected.put("size", 2);

        assertResponse(expected, runSql("DESCRIBE test", "not_c"));
        assertAuditForSqlGetTableSyncGranted("not_c", "test");
    }

    public void testDescribeDocumentExclued() throws Exception {
        createUser("no_3s", "read_test_without_c_3");

        assertResponse(runSql("DESCRIBE test", null), runSql("DESCRIBE test", "no_3s"));
        assertAuditForSqlGetTableSyncGranted("test_admin", "test");
        assertAuditForSqlGetTableSyncGranted("no_3s", "test");
    }

    private void expectBadRequest(ThrowingRunnable code, Matcher<String> errorMessageMatcher) {
        ResponseException e = expectThrows(ResponseException.class, code);
        assertEquals(400, e.getResponse().getStatusLine().getStatusCode());
        assertThat(e.getMessage(), errorMessageMatcher);
    }

    private void assertResponse(Map<String, Object> expected, Map<String, Object> actual) {
        if (false == expected.equals(actual)) {
            NotEqualMessageBuilder message = new NotEqualMessageBuilder();
            message.compareMaps(actual, expected);
            fail("Response does not match:\n" + message.toString());
        }
    }

    private Map<String, Object> runSql(String sql, @Nullable String asUser) throws IOException {
        Header[] headers = asUser == null ? new Header[0] : new Header[] {new BasicHeader("es-security-runas-user", asUser)};
        Response response = client().performRequest("POST", "/_sql", emptyMap(),
                new StringEntity("{\"query\": \"" + sql + "\"}", ContentType.APPLICATION_JSON),
                headers);
        return toMap(response);
    }

    private Map<String, Object> toMap(Response response) throws IOException {
        try (InputStream content = response.getEntity().getContent()) {
            return XContentHelper.convertToMap(JsonXContent.jsonXContent, content, false);
        }
    }

    private void createUser(String name, String role) throws IOException {
        XContentBuilder user = JsonXContent.contentBuilder().prettyPrint().startObject(); {
            user.field("password", "not_used");
            user.field("roles", role);
        }
        user.endObject();
        client().performRequest("PUT", "/_xpack/security/user/" + name, emptyMap(),
                new StringEntity(user.string(), ContentType.APPLICATION_JSON));
    }

    private void assertAuditForSqlGetTableSyncGranted(String user, String index) throws Exception {
        assertAuditEvents(
                audit(true, SQL_ACTION_NAME, user, empty()),
                audit(true, SQL_ACTION_NAME, user, hasItems(index)));
    }

    /**
     * Asserts that audit events have been logged that match all the provided checkers.
     */
    @SafeVarargs
    private final void assertAuditEvents(CheckedFunction<Map<?, ?>, Boolean, Exception>... eventCheckers) throws Exception {
        assertFalse("Previous test had an audit-related failure. All subsequent audit related assertions are bogus because we can't "
                + "guarantee that we fully cleaned up after the last test.", auditFailure);
        try {
            assertBusy(() -> {
                SecurityManager sm = System.getSecurityManager();
                if (sm != null) {
                    sm.checkPermission(new SpecialPermission());
                }
                BufferedReader logReader = AccessController.doPrivileged((PrivilegedAction<BufferedReader>) () -> {
                    try {
                        return  Files.newBufferedReader(AUDIT_LOG_FILE, StandardCharsets.UTF_8);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                });
                logReader.skip(auditLogWrittenBeforeTestStart);

                List<Map<String, Object>> logs = new ArrayList<>();
                String line;
                Pattern logPattern = Pattern.compile(
                        ("PART PART PART origin_type=PART, origin_address=PART, "
                        + "principal=PART, (?:run_as_principal=PART, )?(?:run_by_principal=PART, )?"
                        + "action=\\[(.*?)\\], (?:indices=PART, )?request=PART")
                            .replace(" ", "\\s+").replace("PART", "\\[([^\\]]*)\\]"));
                // fail(logPattern.toString());
                while ((line = logReader.readLine()) != null) {
                    java.util.regex.Matcher m = logPattern.matcher(line);
                    if (false == m.matches()) {
                        throw new IllegalArgumentException("Unrecognized log: " + line);
                    }
                    int i = 1;
                    Map<String, Object> log = new HashMap<>();
                    /* We *could* parse the date but leaving it in the original format makes it
                     * easier to find the lines in the file that this log comes from. */
                    log.put("time", m.group(i++));
                    log.put("origin", m.group(i++));
                    String eventType = m.group(i++);
                    if (false == ("access_denied".equals(eventType) || "access_granted".equals(eventType))) {
                        continue;
                    }
                    log.put("event_type", eventType);
                    log.put("origin_type", m.group(i++));
                    log.put("origin_address", m.group(i++));
                    log.put("principal", m.group(i++));
                    log.put("run_as_principal", m.group(i++));
                    log.put("run_by_principal", m.group(i++));
                    String action = m.group(i++);
                    if (false == (SQL_ACTION_NAME.equals(action) || SQL_INDICES_ACTION_NAME.equals(action))) {
                        continue;
                    }
                    log.put("action", action);
                    // Use a sorted list for indices for consistent error reporting
                    List<String> indices = new ArrayList<>(Strings.splitStringByCommaToSet(m.group(i++)));
                    Collections.sort(indices);
                    log.put("indices", indices);
                    log.put("request", m.group(i++));
                    logs.add(log);
                }
                verifier: for (CheckedFunction<Map<?, ?>, Boolean, Exception> eventChecker : eventCheckers) {
                    for (Map<String, Object> log : logs) {
                        if (eventChecker.apply(log)) {
                            continue verifier;
                        }
                    }
                    StringBuilder logsMessage = new StringBuilder();
                    for (Map<String, Object> log : logs) {
                        logsMessage.append('\n').append(log);
                    }
                    fail("Didn't find an audit event we were looking for. Found:" + logsMessage);
                }
            });
        } catch (AssertionError e) {
            auditFailure = true;
            logger.warn("Failed to find an audit log. Skipping remaining tests in this class after this the missing audit"
                    + "logs could turn up later.");
            throw e;
        }
    }

    private CheckedFunction<Map<?, ?>, Boolean, Exception> audit(boolean granted, String action,
            String principal, Matcher<? extends Iterable<? extends String>> indicesMatcher) {
        String eventType = granted ? "access_granted" : "access_denied";
        return m -> eventType.equals(m.get("event_type"))
            && action.equals(m.get("action"))
            && principal.equals(m.get("principal"))
            && indicesMatcher.matches(m.get("indices"));
    }
}