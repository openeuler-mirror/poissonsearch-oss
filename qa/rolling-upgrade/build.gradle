import org.elasticsearch.gradle.test.NodeInfo
import org.elasticsearch.gradle.test.RestIntegTestTask
import org.elasticsearch.gradle.Version

import java.nio.charset.StandardCharsets

apply plugin: 'elasticsearch.standalone-test'

Closure waitWithAuth = { NodeInfo node, AntBuilder ant ->
    File tmpFile = new File(node.cwd, 'wait.success')
    // wait up to twenty seconds
    final long stopTime = System.currentTimeMillis() + 20000L;
    Exception lastException = null;
    while (System.currentTimeMillis() < stopTime) {
        lastException = null;
        // we use custom wait logic here as the elastic user is not available immediately and ant.get will fail when a 401 is returned
        HttpURLConnection httpURLConnection = null;
        try {
            // TODO this sucks having to hardcode number of nodes, but node.config.numNodes isn't necessarily accurate for rolling
            httpURLConnection = (HttpURLConnection) new URL("http://${node.httpUri()}/_cluster/health?wait_for_nodes=2&wait_for_status=yellow").openConnection();
            httpURLConnection.setRequestProperty("Authorization", "Basic " +
                    Base64.getEncoder().encodeToString("elastic:changeme".getBytes(StandardCharsets.UTF_8)));
            httpURLConnection.setRequestMethod("GET");
            httpURLConnection.setConnectTimeout(1000);
            httpURLConnection.setReadTimeout(30000); // read needs to wait for nodes!
            httpURLConnection.connect();
            if (httpURLConnection.getResponseCode() == 200) {
                tmpFile.withWriter StandardCharsets.UTF_8.name(), {
                    it.write(httpURLConnection.getInputStream().getText(StandardCharsets.UTF_8.name()))
                }
                break;
            }
        } catch (Exception e) {
            logger.debug("failed to call cluster health", e)
            lastException = e
        } finally {
            if (httpURLConnection != null) {
                httpURLConnection.disconnect();
            }
        }

        // did not start, so wait a bit before trying again
        Thread.sleep(500L);
    }
    if (tmpFile.exists() == false && lastException != null) {
        logger.error("final attempt of calling cluster health failed", lastException)
    }
    return tmpFile.exists()
}

String outputDir = "generated-resources/${project.name}"

// This is a top level task which we will add dependencies to below.
// It is a single task that can be used to backcompat tests against all versions.
task bwcTest {
  description = 'Runs backwards compatibility tests.'
  group = 'verification'
}

task copyTestNodeKeystore(type: Copy) {
    from project(':x-pack-elasticsearch:plugin')
            .file('src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.jks')
    into outputDir
}

for (boolean withSystemKey: [true, false]) {
  String baseNameForSystemKey = (withSystemKey ? 'With' : 'Without') + 'SystemKey'
  for (Version version : wireCompatVersions) {
    String baseName = "v${version}${baseNameForSystemKey}"

    Task oldClusterTest = tasks.create(name: "${baseName}#oldClusterTest", type: RestIntegTestTask) {
      mustRunAfter(precommit)
    }

    Object extension = extensions.findByName("${baseName}#oldClusterTestCluster")
    configure(extensions.findByName("${baseName}#oldClusterTestCluster")) {
      dependsOn copyTestNodeKeystore
      plugin ':x-pack-elasticsearch:plugin'
      distribution = 'zip'
      bwcVersion = version
      numBwcNodes = 2
      numNodes = 2
      clusterName = 'rolling-upgrade'
      waitCondition = waitWithAuth
      setting 'logger.org.elasticsearch.xpack.security', 'TRACE'
      setting 'xpack.security.transport.ssl.enabled', 'true'
      setting 'xpack.ssl.keystore.path', 'testnode.jks'
      setting 'xpack.ssl.keystore.password', 'testnode'
      extraConfigFile 'testnode.jks', new File(outputDir + '/testnode.jks')
      if (withSystemKey) {
        if (version.onOrAfter('5.1.0')) {
          // The setting didn't exist until 5.1.0
          setting 'xpack.security.system_key.required', 'true'
        }
        extraConfigFile 'x-pack/system_key', 'src/test/resources/system_key'
      }
    }

    Task oldClusterTestRunner = tasks.getByName("${baseName}#oldClusterTestRunner")
    oldClusterTestRunner.configure {
      systemProperty 'tests.rest.suite', 'old_cluster'
    }

    Task mixedClusterTest = tasks.create(name: "${baseName}#mixedClusterTest", type: RestIntegTestTask)

    configure(extensions.findByName("${baseName}#mixedClusterTestCluster")) {
      dependsOn oldClusterTestRunner, "${baseName}#oldClusterTestCluster#node1.stop"
      plugin ':x-pack-elasticsearch:plugin'
      distribution = 'zip'
      clusterName = 'rolling-upgrade'
      unicastTransportUri = { seedNode, node, ant -> oldClusterTest.nodes.get(0).transportUri() }
      dataDir = "${-> oldClusterTest.nodes[1].dataDir}"
      waitCondition = waitWithAuth
      setting 'xpack.ssl.keystore.path', 'testnode.jks'
      setting 'xpack.ssl.keystore.password', 'testnode'
      extraConfigFile 'testnode.jks', new File(outputDir + '/testnode.jks')
      if (withSystemKey) {
        setting 'xpack.security.system_key.required', 'true'
        extraConfigFile 'x-pack/system_key', 'src/test/resources/system_key'
      }
    }

    Task mixedClusterTestRunner = tasks.getByName("${baseName}#mixedClusterTestRunner")
    mixedClusterTestRunner.configure {
      systemProperty 'tests.rest.suite', 'mixed_cluster'
      finalizedBy "${baseName}#oldClusterTestCluster#node0.stop"
    }

    Task upgradedClusterTest = tasks.create(name: "${baseName}#upgradedClusterTest", type: RestIntegTestTask)

    configure(extensions.findByName("${baseName}#upgradedClusterTestCluster")) {
      dependsOn(mixedClusterTestRunner, "${baseName}#oldClusterTestCluster#node0.stop")
      plugin ':x-pack-elasticsearch:plugin'
      distribution = 'zip'
      clusterName = 'rolling-upgrade'
      unicastTransportUri = { seedNode, node, ant -> mixedClusterTest.nodes.get(0).transportUri() }
      dataDir = "${-> oldClusterTest.nodes[0].dataDir}"
      waitCondition = waitWithAuth
      setting 'xpack.ssl.keystore.path', 'testnode.jks'
      setting 'xpack.ssl.keystore.password', 'testnode'
      extraConfigFile 'testnode.jks', new File(outputDir + '/testnode.jks')
      if (withSystemKey) {
        setting 'xpack.security.system_key.required', 'true'
        extraConfigFile 'x-pack/system_key', 'src/test/resources/system_key'
      }
    }

    Task upgradedClusterTestRunner = tasks.getByName("${baseName}#upgradedClusterTestRunner")
    upgradedClusterTestRunner.configure {
      systemProperty 'tests.rest.suite', 'upgraded_cluster'

      // migration tests should only run when the original/old cluster nodes where versions < 5.2.0.
      // this stinks but we do the check here since our rest tests do not support conditionals
      // otherwise we could check the index created version
      String versionStr = project.extensions.findByName("${baseName}#oldClusterTestCluster").properties.get('bwcVersion')
      String[] versionParts = versionStr.split('\\.')
      if (versionParts[0].equals("5")) {
          Integer minor = Integer.parseInt(versionParts[1])
          if (minor >= 2) {
              systemProperty 'tests.rest.blacklist', '/20_security/Verify default password migration results in upgraded cluster'
          }
      }
      // only need to kill the mixed cluster tests node here because we explicitly told it to not stop nodes upon completion
      finalizedBy "${baseName}#mixedClusterTestCluster#stop"
    }

    Task versionBwcTest = tasks.create(name: "${baseName}#bwcTest") {
      dependsOn = [upgradedClusterTest]
    }

    bwcTest.dependsOn(versionBwcTest)
  }
}

test.enabled = false // no unit tests for rolling upgrades, only the rest integration test

// basic integ tests includes testing bwc against the most recent version
task integTest {
  dependsOn = [
    "v${wireCompatVersions[-1]}WithSystemKey#bwcTest",
    "v${wireCompatVersions[-1]}WithoutSystemKey#bwcTest",
  ]
}
check.dependsOn(integTest)

dependencies {
    testCompile project(path: ':x-pack-elasticsearch:plugin', configuration: 'runtime')
    testCompile project(path: ':x-pack-elasticsearch:plugin', configuration: 'testArtifacts')
}

// copy x-pack plugin info so it is on the classpath and security manager has the right permissions
task copyXPackRestSpec(type: Copy) {
    dependsOn(project.configurations.restSpec, 'processTestResources')
    from project(':x-pack-elasticsearch:plugin').sourceSets.test.resources
    include 'rest-api-spec/api/**'
    into project.sourceSets.test.output.resourcesDir
}

task copyXPackPluginProps(type: Copy) {
    dependsOn(copyXPackRestSpec)
    from project(':x-pack-elasticsearch:plugin').file('src/main/plugin-metadata')
    from project(':x-pack-elasticsearch:plugin').tasks.pluginProperties
    into outputDir
}
project.sourceSets.test.output.dir(outputDir, builtBy: copyXPackPluginProps)

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url "https://artifacts.elastic.co/maven"
    }
    maven {
        url "https://snapshots.elastic.co/maven"
    }
}
