---
"Test simulate with stored ingest pipeline":
  - do:
      cluster.health:
          wait_for_status: green

  - do:
      ingest.put_pipeline:
        id: "my_pipeline"
        body:  >
          {
            "description": "_description",
            "processors": [
              {
                "mutate" : {
                  "update" : {
                    "field2" : "_value"
                  }
                }
              }
            ]
          }
  - match: { _id: "my_pipeline" }

  # Simulate a Thread.sleep(), because pipeline are updated in the background
  - do:
      catch: request_timeout
      cluster.health:
        wait_for_nodes: 99
        timeout: 2s
  - match: { "timed_out": true }

  - do:
      ingest.simulate:
        id: "my_pipeline"
        body: >
          {
            "docs": [
              {
                "_index": "index",
                "_type": "type",
                "_id": "id",
                "_source": {
                  "foo": "bar"
                }
              }
            ]
          }
  - length: { docs: 1 }
  - is_false: docs.0.error
  - is_true: docs.0.modified
  - match: { docs.0.foo: "bar" }
  - match: { docs.0.field2: "_value" }


---
"Test simulate with provided pipeline definition":
  - do:
      cluster.health:
          wait_for_status: green

  - do:
      ingest.simulate:
        body: >
          {
            "pipeline": {
              "description": "_description",
              "processors": [
                {
                  "mutate" : {
                    "update" : {
                      "field2" : "_value"
                    }
                  }
                }
              ]
            },
            "docs": [
              {
                "_index": "index",
                "_type": "type",
                "_id": "id",
                "_source": {
                  "foo": "bar"
                }
              }
            ]
          }
  - length: { docs: 1 }

---
"Test simulate with verbose flag":
  - do:
      cluster.health:
          wait_for_status: green

  - do:
      ingest.simulate:
        verbose: true
        body: >
          {
            "pipeline": {
              "description": "_description",
              "processors": [
                {
                  "mutate" : {
                    "update" : {
                      "field2" : "_value"
                    }
                  }
                },
                {
                  "mutate" : {
                    "update" : {
                      "field3" : "third_val"
                    }
                  }
                }
              ]
            },
            "docs": [
              {
                "_index": "index",
                "_type": "type",
                "_id": "id",
                "_source": {
                  "foo": "bar"
                }
              }
            ]
          }
  - length: { docs: 1 }
  - length: { docs.0.processor_steps: 2 }
  - match: { docs.0.processor_steps.0.processor_id: "processor[mutate]-0" }
  - is_false: docs.0.processor_steps.0.error
  - is_true: docs.0.processor_steps.0.modified
  - length: { docs.0.processor_steps.0.doc: 2 }
  - match: { docs.0.processor_steps.0.doc.foo: "bar" }
  - match: { docs.0.processor_steps.0.doc.field2: "_value" }
  - length: { docs.0.processor_steps.1.doc: 3 }
  - match: { docs.0.processor_steps.1.doc.foo: "bar" }
  - match: { docs.0.processor_steps.1.doc.field2: "_value" }
  - match: { docs.0.processor_steps.1.doc.field3: "third_val" }

---
"Test simulate with exception thrown":
  - do:
      cluster.health:
          wait_for_status: green

  - do:
      catch: request
      ingest.simulate:
        body: >
          {
            "pipeline": {
              "description": "_description",
              "processors": [
                {
                  "mutate" : {
                    "uppercase" : ["foo"]
                  }
                }
              ]
            },
            "docs": [
              {
                "_index": "index",
                "_type": "type",
                "_id": "id",
                "_source": {
                  "not_foo": "bar"
                }
              },
              {
                "_index": "index",
                "_type": "type",
                "_id": "id2",
                "_source": {
                  "foo": "bar"
                }
              }
            ]
          }
  - length: { docs: 2 }
  - is_true: docs.0.error
  - match: { docs.0.failure: "java.lang.NullPointerException" }
  - is_false: docs.1.error
  - is_true: docs.1.modified
  - match: { docs.1.doc.foo: "BAR" }
