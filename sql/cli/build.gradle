import org.elasticsearch.gradle.test.RunTask

apply plugin: 'elasticsearch.build'
apply plugin: 'application'

description = 'Command line interface to Elasticsearch that speaks SQL'

dependencies {
  compile "org.jline:jline:3.3.1"
  compile project(':x-pack-elasticsearch:sql:net-client')
  compile project(':x-pack-elasticsearch:sql:cli-proto')

  testCompile project(":x-pack-elasticsearch:transport-client") // NOCOMMIT probably can remove this
  testCompile project(path: ':x-pack-elasticsearch:plugin', configuration: 'testArtifacts')
  testCompile project(':x-pack-elasticsearch:sql:test-utils')

  // Used by the hack to run InternalTestCluster if not running against a gradle-started cluster.
  testCompile project(path: ':modules:lang-painless', configuration: 'runtime')

  runtime "org.fusesource.jansi:jansi:1.16"
  runtime "org.elasticsearch:jna:4.4.0-1"
}

dependencyLicenses {
  mapping from: /cli-proto.*/, to: 'elasticsearch'
  mapping from: /net-client.*/, to: 'elasticsearch'
  ignoreSha 'cli-proto'
  ignoreSha 'net-client'
}

forbiddenApisMain {
  // does not depend on core, so only jdk and http signatures should be checked
  signaturesURLs = [this.class.getResource('/forbidden/jdk-signatures.txt')]
}

// TODO seems like we should use the jars....
jar {
  from(zipTree(project(':x-pack-elasticsearch:sql:net-client').jar.archivePath))
  from(zipTree(project(':x-pack-elasticsearch:sql:cli-proto').jar.archivePath))
}

mainClassName = "org.elasticsearch.sql.console.SqlConsole"

// Needed so we can launch graphviz if it is installed
project.compactProfile = 'full'

forbiddenApisTest {
  //we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage
  bundledSignatures -= 'jdk-non-portable'
  bundledSignatures += 'jdk-internal'
}

thirdPartyAudit.excludes = [
  // included by jline but not used
  // NOCOMMIT maybe we need some of these?
  'com.sun.jna.Library',
  'com.sun.jna.Native',
  'com.sun.jna.NativeLong',
  'com.sun.jna.Platform',
  'com.sun.jna.Pointer',
  'com.sun.jna.Structure$ByReference',
  'com.sun.jna.Structure$ByValue',
  'com.sun.jna.Structure',
  'com.sun.jna.Union',
  'com.sun.jna.ptr.IntByReference',
  'com.sun.jna.win32.StdCallLibrary',
  'com.sun.jna.win32.W32APIOptions',
  'org.apache.sshd.client.SshClient',
  'org.apache.sshd.client.auth.keyboard.UserInteraction',
  'org.apache.sshd.client.channel.ChannelShell',
  'org.apache.sshd.client.channel.ClientChannel',
  'org.apache.sshd.client.channel.ClientChannelEvent',
  'org.apache.sshd.client.future.AuthFuture',
  'org.apache.sshd.client.future.ConnectFuture',
  'org.apache.sshd.client.future.OpenFuture',
  'org.apache.sshd.client.session.ClientSession',
  'org.apache.sshd.common.Factory',
  'org.apache.sshd.common.channel.PtyMode',
  'org.apache.sshd.common.config.keys.FilePasswordProvider',
  'org.apache.sshd.common.util.io.NoCloseInputStream',
  'org.apache.sshd.common.util.io.NoCloseOutputStream',
  'org.apache.sshd.server.Command',
  'org.apache.sshd.server.Environment',
  'org.apache.sshd.server.ExitCallback',
  'org.apache.sshd.server.SessionAware',
  'org.apache.sshd.server.Signal',
  'org.apache.sshd.server.SshServer',
  'org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider',
  'org.apache.sshd.server.scp.ScpCommandFactory$Builder',
  'org.apache.sshd.server.session.ServerSession',
  'org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder',
  'org.fusesource.jansi.Ansi',
  'org.fusesource.jansi.WindowsAnsiOutputStream',
  'org.fusesource.jansi.internal.CLibrary$Termios',
  'org.fusesource.jansi.internal.CLibrary$WinSize',
  'org.fusesource.jansi.internal.CLibrary',
  'org.fusesource.jansi.internal.Kernel32$CONSOLE_SCREEN_BUFFER_INFO',
  'org.fusesource.jansi.internal.Kernel32$COORD',
  'org.fusesource.jansi.internal.Kernel32$INPUT_RECORD',
  'org.fusesource.jansi.internal.Kernel32$KEY_EVENT_RECORD',
  'org.fusesource.jansi.internal.Kernel32',
  'org.fusesource.jansi.internal.WindowsSupport',
  'org.mozilla.universalchardet.UniversalDetector'
]

apply plugin: 'elasticsearch.rest-test'
integTest.mustRunAfter test

integTestCluster {
  distribution = 'zip' // NOCOMMIT make double sure we want all the modules
  plugin project(':x-pack-elasticsearch:plugin').path
  /* Get a "clean" test without the other x-pack features here and check them
   * all together later on. */
  setting 'xpack.security.enabled', 'false'
  setting 'xpack.monitoring.enabled', 'false'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.watcher.enabled', 'false'
}

task runServer(type: RunTask) {
  distribution = 'zip' // NOCOMMIT make double sure we want all the modules
  plugin project(':x-pack-elasticsearch:plugin').path
  /* Get a "clean" test without the other x-pack features here and check them
   * all together later on. */
  setting 'xpack.security.enabled', 'false'
  setting 'xpack.monitoring.enabled', 'false'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.watcher.enabled', 'false'
  run.dependsOn this
}

// Allow for com.sun.net.httpserver.* usage for testing
eclipse {
  classpath.file {
    whenMerged { cp ->
      def con = entries.find { e ->
        e.kind == "con" && e.toString().contains("org.eclipse.jdt.launching.JRE_CONTAINER")
      }
      con.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule(
        "accessible", "com/sun/net/httpserver/*"))
    }
  }
}
forbiddenApisTest {
  bundledSignatures -= 'jdk-non-portable'
  bundledSignatures += 'jdk-internal'
}
