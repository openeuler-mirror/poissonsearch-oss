setup:
  - do:
      xpack.ml.put_job:
        job_id: job-1
        body:  >
          {
            "job_id":"job-1",
            "analysis_config" : {
                "bucket_span":3600,
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
                "format":"JSON",
                "time_field":"time",
                "time_format":"epoch"
            }
          }

  - do:
      xpack.ml.put_job:
        job_id: job-2
        body:  >
          {
            "analysis_config" : {
                "bucket_span":3600,
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
                "time_field":"time"
            }
          }

---
"Test get all datafeeds and stats given no datafeed exists":

  - do:
      xpack.ml.get_datafeeds:
        datafeed_id: "_all"
  - match: { count: 0 }
  - match: { datafeeds: [] }

  - do:
      xpack.ml.get_datafeeds_stats:
        datafeed_id: "_all"
  - match: { count: 0 }
  - match: { datafeeds: [] }

---
"Test put datafeed referring to missing job_id":
  - do:
      catch: /resource_not_found_exception/
      xpack.ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"a-missing-job",
            "indexes":["index-foo"],
            "types":["type-bar"]
          }

---
"Test put datafeed referring to existing job_id":
  - do:
      xpack.ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"job-1",
            "indexes":["index-foo"],
            "types":["type-bar"]
          }
  - match: { datafeed_id: "test-datafeed-1" }

---
"Test put datafeed whose id is already taken":
  - do:
      xpack.ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"job-1",
            "indexes":["index-foo"],
            "types":["type-bar"]
          }
  - match: { datafeed_id: "test-datafeed-1" }

  - do:
      catch: /resource_already_exists_exception/
      xpack.ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"job-2",
            "indexes":["index-foo"],
            "types":["type-bar"]
          }

---
"Test put datafeed with job_id that is already used by another datafeed":
  - do:
      xpack.ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"job-1",
            "indexes":["index-foo"],
            "types":["type-bar"]
          }
  - match: { datafeed_id: "test-datafeed-1" }

  - do:
      catch: /A datafeed \[test-datafeed-1\] already exists for job \[job-1\]/
      xpack.ml.put_datafeed:
        datafeed_id: test-datafeed-2
        body:  >
          {
            "job_id":"job-1",
            "indexes":["index-foo"],
            "types":["type-bar"]
          }

---
"Test put datafeed with invalid query":
  - do:
      catch: /parsing_exception/
      xpack.ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"job-1",
            "indexes":["index-foo"],
            "types":["type-bar"],
            "query":{"match_all_mispelled":{}}
          }

---
"Test delete datafeed with missing id":
  - do:
      catch: /resource_not_found_exception/
      xpack.ml.delete_datafeed:
        datafeed_id: a-missing-datafeed

---
"Test delete datafeed":
  - do:
      xpack.ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"job-1",
            "indexes":["index-foo"],
            "types":["type-bar"]
          }
  - match: { datafeed_id: "test-datafeed-1" }

  - do:
      xpack.ml.delete_datafeed:
        datafeed_id: test-datafeed-1
  - match: { acknowledged: true }
