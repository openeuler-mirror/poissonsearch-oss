
# Machine Learning API messages

autodetect.flush.timeout =[{0}] Timed out flushing job.
autodetect.flush.failed.unexpected.death =[{0}] Flush failed: Unexpected death of the Autodetect process flushing job.

cpu.limit.jobs = Cannot start job with id ''{0}''. The maximum number of concurrently running jobs is limited as a function of the number of CPU cores see this error code''s help documentation for details of how to elevate the setting

datastore.error.deleting =  Error deleting index ''{0}''
datastore.error.deleting.missing.index = Cannot delete job - no index with id ''{0}'' in the database
datastore.error.executing.script = Error executing script ''{0}''

invalid.id = Invalid {0}; ''{1}'' must be lowercase alphanumeric, may contain hyphens or underscores, may not start with underscore
inconsistent.id = Inconsistent {0}; ''{1}'' specified in the body differs from ''{2}'' specified as a URL argument

license.limit.detectors = Cannot create new job - your license limits you to {0,number,integer} detector(s), but you have configured {1,number,integer}.
license.limit.detectors.reactivate = Cannot reactivate job with id ''{0}'' - your license limits you to {1,number,integer} concurrently running detectors. You must close a job before you can reactivate another.
license.limit.jobs = Cannot create new job - your license limits you to {0,number,integer} concurrently running job(s). You must close a job before you can create a new one.
license.limit.jobs.reactivate = Cannot reactivate job with id ''{0}'' - your license limits you to {1,number,integer} concurrently running jobs. You must close a job before you can reactivate another.
license.limit.partitions = Cannot create new job - your license disallows partition fields, but you have configured one.

job.audit.created = Job created
job.audit.deleted = Job deleted
job.audit.paused = Job paused
job.audit.resumed = Job resumed
job.audit.updated = Job updated: {0}
job.audit.reverted = Job model snapshot reverted to ''{0}''
job.audit.old.results.deleted = Deleted results prior to {0}
job.audit.snapshot.deleted = Job model snapshot ''{0}'' deleted
job.audit.datafeed.started.from.to = Datafeed started (from: {0} to: {1})
job.audit.datafeed.started.realtime = Datafeed started in real-time
job.audit.datafeed.continued.realtime = Datafeed continued in real-time
job.audit.datafeed.lookback.completed = Datafeed lookback completed
job.audit.datafeed.stopped = Datafeed stopped
job.audit.datafeed.no.data = Datafeed has been retrieving no data for a while
job.audit.datafeed.data.seen.again = Datafeed has started retrieving data again
job.audit.datafeed.data.analysis.error = Datafeed is encountering errors submitting data for analysis: {0}
job.audit.datafeed.data.extraction.error = Datafeed is encountering errors extracting data: {0}
job.audit.datafeed.recovered = Datafeed has recovered data extraction and analysis

system.audit.started = System started
system.audit.shutdown = System shut down

job.cannot.delete.while.running = Cannot delete job ''{0}'' while it is {1}
job.cannot.pause = Cannot pause job ''{0}'' while its status is {1}
job.cannot.resume = Cannot resume job ''{0}'' while its status is {1}

job.config.byField.incompatible.function = by_field_name cannot be used with function ''{0}''
job.config.byField.needs.another = by_field_name must be used in conjunction with field_name or function
job.config.categorization.filters.require.categorization.field.name = categorization_filters require setting categorization_field_name
job.config.categorization.filters.contains.duplicates = categorization_filters contain duplicates
job.config.categorization.filter.contains.empty = categorization_filters are not allowed to contain empty strings
job.config.categorization.filter.contains.invalid.regex = categorization_filters contains invalid regular expression ''{0}''
job.config.condition.invalid.operator = Invalid operator for condition
job.config.condition.invalid.value.null = Invalid condition: the value field cannot be null
job.config.condition.invalid.value.numeric = Invalid condition value: cannot parse a double from string ''{0}''
job.config.condition.invalid.value.regex = Invalid condition value: ''{0}'' is not a valid regular expression
job.config.condition.unknown.operator = Unknown condition operator ''{0}''
job.config.detectionrule.condition.categorical.invalid.option = Invalid detector rule: a categorical rule_condition does not support {0}
job.config.detectionrule.condition.categorical.missing.option = Invalid detector rule: a categorical rule_condition requires {0} to be set
job.config.detectionrule.condition.invalid.fieldname = Invalid detector rule: field_name has to be one of {0}; actual was ''{1}''
job.config.detectionrule.condition.missing.fieldname = Invalid detector rule: missing field_name in rule_condition where field_value ''{0}'' is set
job.config.detectionrule.condition.numerical.invalid.operator = Invalid detector rule: operator ''{0}'' is not allowed
job.config.detectionrule.condition.numerical.invalid.option = Invalid detector rule: a numerical rule_condition does not support {0}
job.config.detectionrule.condition.numerical.missing.option = Invalid detector rule: a numerical rule_condition requires {0} to be set
job.config.detectionrule.condition.numerical.with.fieldname.requires.fieldvalue = Invalid detector rule: a numerical rule_condition with field_name requires that field_value is set
job.config.detectionrule.invalid.targetfieldname = Invalid detector rule: target_field_name has to be one of {0}; actual was ''{1}''
job.config.detectionrule.missing.targetfieldname = Invalid detector rule: missing target_field_name where target_field_value ''{0}'' is set
job.config.detectionrule.not.supported.by.function = Invalid detector rule: function {0} does not support rules
job.config.detectionrule.requires.at.least.one.condition = Invalid detector rule: at least one rule_condition is required
job.config.fieldname.incompatible.function = field_name cannot be used with function ''{0}''
job.config.function.requires.byfield = by_field_name must be set when the ''{0}'' function is used
job.config.function.requires.fieldname = field_name must be set when the ''{0}'' function is used
job.config.function.requires.overfield = over_field_name must be set when the ''{0}'' function is used
job.config.function.incompatible.presummarized = The ''{0}'' function cannot be used in jobs that will take pre-summarized input
job.config.id.already.taken = The job cannot be created with the Id ''{0}''. The Id is already used.
job.config.id.too.long = The job id cannot contain more than {0,number,integer} characters.
job.config.invalid.fieldname.chars = Invalid field name ''{0}''. Field names including over, by and partition fields cannot contain any of these characters: {1}
job.config.invalid.timeformat = Invalid Time format string ''{0}''
job.config.missing.analysisconfig = An analysis_config must be set
job.config.model.debug.config.invalid.bounds.percentile = Invalid model_debug_config: bounds_percentile must be in the range [0, 100]
job.config.field.value.too.low = {0} cannot be less than {1,number}. Value = {2,number}
job.config.no.analysis.field = One of function, field_name, by_field_name or over_field_name must be set
job.config.no.analysis.field.not.count = Unless the function is 'count' one of field_name, by_field_name or over_field_name must be set
job.config.no.detectors = No detectors configured
job.config.overField.incompatible.function = over_field_name cannot be used with function ''{0}''
job.config.overField.needs.another = over_field_name must be used in conjunction with field_name or function
job.config.overlapping.buckets.incompatible.function = Overlapping buckets cannot be used with function ''{0}''
job.config.multiple.bucketspans.require.bucket_span = Multiple bucket_spans require a bucket_span to be specified
job.config.multiple.bucketspans.must.be.multiple = Multiple bucket_span ''{0}'' must be a multiple of the main bucket_span ''{1}''
job.config.per.partition.normalization.requires.partition.field = If the job is configured with Per-Partition Normalization enabled a detector must have a partition field
job.config.per.partition.normalization.cannot.use.influencers = A job configured with Per-Partition Normalization cannot use influencers

job.config.update.analysis.limits.parse.error = JSON parse error reading the update value for analysis_limits
job.config.update.analysis.limits.cannot.be.null = Invalid update value for analysis_limits: null
job.config.update.analysis.limits.model.memory.limit.cannot.be.decreased = Invalid update value for analysis_limits: model_memory_limit cannot be decreased; existing is {0}, update had {1}
job.config.update.categorization.filters.invalid = Invalid update value for categorization_filters: value must be an array of strings; actual was: {0}
job.config.update.custom.settings.invalid = Invalid update value for custom_settings: value must be an object
job.config.update.description.invalid = Invalid update value for job description: value must be a string
job.config.update.detectors.invalid = Invalid update value for detectors: value must be an array
job.config.update.detectors.invalid.detector.index = Invalid index: valid range is [{0}, {1}]; actual was: {2}
job.config.update.detectors.detector.index.should.be.integer = Invalid index: integer expected; actual was: {0}
job.config.update.detectors.missing.params = Invalid update value for detectors: requires {0} and at least one of {1}
job.config.update.detectors.description.should.be.string = Invalid description: string expected; actual was: {0}
job.config.update.detectors.rules.parse.error = JSON parse error reading the update value for detectorRules
job.config.update.failed = Update failed. Please see the logs to trace the cause of the failure.
job.config.update.ignore.downtime.parse.error = Invalid update value for ignore_downtime: expected one of {0}; actual was: {1}
job.config.update.invalid.key = Invalid key ''{0}''
job.config.update.job.is.not.closed = Cannot update key ''{0}'' while job is not closed; current status is {1}
job.config.update.model.debug.config.parse.error = JSON parse error reading the update value for ModelDebugConfig
job.config.update.requires.non.empty.object = Update requires JSON that contains a non-empty object
job.config.update.parse.error = JSON parse error reading the job update
job.config.update.background.persist.interval.invalid = Invalid update value for background_persist_interval: value must be an exact number of seconds no less than 3600
job.config.update.renormalization.window.days.invalid = Invalid update value for renormalization_window_days: value must be an exact number of days
job.config.update.model.snapshot.retention.days.invalid = Invalid update value for model_snapshot_retention_days: value must be an exact number of days
job.config.update.results.retention.days.invalid = Invalid update value for results_retention_days: value must be an exact number of days
job.config.update.datafeed.config.parse.error = JSON parse error reading the update value for datafeed_config
job.config.update.datafeed.config.cannot.be.null = Invalid update value for datafeed_config: null

job.config.unknown.function = Unknown function ''{0}''

job.index.already.exists = Cannot create index ''{0}'' as it already exists

datafeed.config.invalid.option.value = Invalid {0} value ''{1}'' in datafeed configuration

datafeed.does.not.support.job.with.latency = A job configured with datafeed cannot support latency
datafeed.aggregations.requires.job.with.summary.count.field = A job configured with a datafeed with aggregations must have summary_count_field_name ''{0}''

job.data.concurrent.use.close = Cannot close job {0} while another connection {2}is {1} the job
job.data.concurrent.use.flush = Cannot flush job {0} while another connection {2}is {1} the job
job.data.concurrent.use.pause = Cannot pause job {0} while another connection {2}is {1} the job
job.data.concurrent.use.resume = Cannot resume job {0} while another connection {2}is {1} the job
job.data.concurrent.use.revert = Cannot revert model snapshot for job {0} while another connection {2}is {1} the job
job.data.concurrent.use.update = Cannot update job {0} while another connection {2}is {1} the job
job.data.concurrent.use.upload = Cannot write to job {0} while another connection {2}is {1} the job

job.missing.quantiles = Cannot read persisted quantiles for job ''{0}''
job.unknown.id = No known job with id ''{0}''

datafeed.cannot.start = Cannot start datafeed [{0}] while its status is {1}
datafeed.cannot.stop.in.current.state = Cannot stop datafeed [{0}] while its status is {1}
datafeed.cannot.update.in.current.state = Cannot update datafeed [{0}] while its status is {1}
datafeed.cannot.delete.in.current.state = Cannot delete datafeed [{0}] while its status is {1}
datafeed.failed.to.stop = Failed to stop datafeed
datafeed.not.found = No datafeed with id [{0}] exists

json.job.config.mapping.error = JSON mapping error reading the job configuration
json.job.config.parse.error = JSON parse error reading the job configuration

json.detector.config.mapping.error = JSON mapping error reading the detector configuration
json.detector.config.parse.error = JSON parse error reading the detector configuration

rest.action.not.allowed.for.datafeed.job = This action is not allowed for a datafeed job

rest.invalid.datetime.params = Query param ''{0}'' with value ''{1}'' cannot be parsed as a date or converted to a number (epoch).
rest.invalid.flush.params.missing.argument = Invalid flush parameters: ''{0}'' has not been specified.
rest.invalid.flush.params.unexpected = Invalid flush parameters: unexpected ''{0}''.
rest.invalid.reset.params = Invalid reset range parameters: ''{0}'' has not been specified.
rest.invalid.from = Parameter 'from' cannot be < 0
rest.invalid.size = Parameter 'size' cannot be < 0
rest.invalid.from.size.sum = The sum of parameters ''from'' and ''size'' cannot be higher than {0}. Please use filters to reduce the number of results.
rest.start.after.end = Invalid time range: end time ''{0}'' is earlier than start time ''{1}''.
rest.reset.bucket.no.latency = Bucket resetting is not supported when no latency is configured.
rest.job.not.closed.revert = Can only revert to a model snapshot when the job is closed.
rest.no.such.model.snapshot = No matching model snapshot exists for job ''{0}''
rest.description.already.used = Model snapshot description ''{0}'' has already been used for job ''{1}''
rest.cannot.delete.highest.priority = Model snapshot ''{0}'' is the active snapshot for job ''{1}'', so cannot be deleted

process.action.closed.job = closed
process.action.closing.job = closing
process.action.deleting.job = deleting
process.action.flushing.job = flushing
process.action.pausing.job = pausing
process.action.resuming.job = resuming
process.action.reverting.job = reverting the model snapshot for
process.action.sleeping.job = holding
process.action.updating.job = updating
process.action.writing.job = writing to

